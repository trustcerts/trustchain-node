---
env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set npm
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          key: npm-${{ hashFiles('package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-
      - name: Install dependencies
        run: npm ci --ignore-scripts
      - name: Build code
        run: |
          sed -ri "s|\"BUILD\"|\"$GITHUB_SHA\"|" apps/shared/build.ts
          node tools/build.mjs
      - name: Upload builds
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist/
  deploy:
    if: contains( github.ref, 'main')
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        run: echo test
  e2e:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - env:
          REF: ${{ github.ref }}
        id: main_or_not
        name: main or not
        run: |
          if [$REF == 'refs/heads/main']
          then
              echo "::set-output name=imagetag::latest"
          else
              echo "::set-output name=imagetag::env.PR_NUMBER"
          fi
      - env:
          IMAGE_TAG: ${{ steps.main_or_not.outputs.imagetag }}
        name: e2e test
        run: |
          printf "\nIMAGE_TAG=$IMAGE_TAG\n" >> test/.env
          cat test/.env
          docker-compose -f test/docker-compose.yml --env-file test/.env run test-${{ matrix.services }} npm run test:e2e-${{ matrix.services }}-ci
      - if: always()
        name: Upload E2E Test Results
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Results ${{ matrix.service }}
          path: ./*.xml
    strategy:
      matrix:
        services:
          - http-gateway
          - http-observer
          - http-validator
          - network-gateway
          - network-observer
          - network-validator
          - persist
          - parse
          - wallet
  network-test:
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - env:
          REF: ${{ github.ref }}
        id: main_or_not
        name: main or not
        run: |
          if [$REF == 'refs/heads/main']
          then
              echo "::set-output name=imagetag::latest"
          else
              echo "::set-output name=imagetag::env.PR_NUMBER"
          fi
      - name: Set node
        uses: actions/setup-node@v2
        with:
          cache: npm
          node-version: 16
      - env:
          IMAGE_TAG: ${{ steps.main_or_not.outputs.imagetag }}
        name: Preparation
        run: |
          docker network create test-network
          chmod 777 test/network/config/
          cd test/network/config/
          for filename in $(find . -name '*.env' -print); do
            echo "update $filename"
            printf "\nIMAGE_TAG=$IMAGE_TAG\n" >> $filename
          done
          bash all.sh up -d
      - name: Test
        run: |
          npm ci
          cd ${GITHUB_WORKSPACE}/test/network/config/
          bash run.sh
          cd ${GITHUB_WORKSPACE}
          npm run test:network
  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download builds
        uses: actions/download-artifact@v2
        with:
          name: build
          path: dist/
      - name: Log into github's docker registry
        uses: docker/login-action@v1
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          path: /tmp/.buildx-cache
          restore-keys: |
            ${{ runner.os }}-single-buildx
      - name: change buildx builder instance
        run: docker buildx create --use
      - env:
          CI_COMMIT_BRANCH: latest
          CI_REGISTRY_IMAGE: trustcerts/trustchain
        name: Build docker image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            app=${{ matrix.services }}
            base=${{ env.PR_NUMBER }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          context: .
          file: build/Dockerfile
          push: false
          tags: |
            ${{env.CI_REGISTRY_IMAGE}}-${{matrix.services}}:${{env.PR_NUMBER}}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - env:
          CI_COMMIT_BRANCH: latest
          CI_REGISTRY_IMAGE: trustcerts/trustchain
        if: github.ref == 'refs/heads/main'
        name: Build temporary docker images
        run: |
          node tools/package.mjs
    strategy:
      matrix:
        services:
          - http-gateway
          - http-observer
          - http-validator
          - network-gateway
          - network-observer
          - network-validator
          - persist
          - parse
          - wallet
  publish-test-results:
    if: always()
    name: Publish Unit Tests Results
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml
  release:
    if: contains( github.ref, 'main')
    needs: network-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set npm
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Login into docker
        uses: docker/login-action@v1
        with:
          password: ${{ secrets.DOCKER_PASSWORD }}
          username: ${{ secrets.DOCKER_USERNAME }}
      - env:
          CI_COMMIT_BRANCH: ${{ env.PR_NUMBER }}
          CI_REGISTRY_IMAGE: ghcr.io/trustcerts/trustchain
        name: retag images
        run: node tools/retag.mjs
  test-unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          cache: npm
          node-version: 16
      - env:
          STORAGE: tmp/
        name: test
        run: |
          npm ci
          npm run test:unit-ci --cache .npm
      - if: always()
        name: Upload Unit Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results ${{ matrix.service }}
          path: ./*.xml
name: CI
'on':
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - main