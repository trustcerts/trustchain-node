name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

# TODO evaluate if we need the pr number since we store the images in the cicd cache and not in a registry during the branches
# env:
#   PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set npm
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Eslint check
        run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: prebuild
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Check commit coverage
        run: npm run coverage

      - name: Cache build node
        uses: actions/cache@v2
        id: build-dist-folder
        with:
          path: ./dist
          key: build-${{ hashFiles('./apps') }}-${{ hashFiles('./libs') }}-
          restore-keys: build-

      - name: Build code
        if: steps.build-dist-folder.outputs.cache-hit != 'true'
        run: |
          sed -ri "s|\"BUILD\"|\"$GITHUB_SHA\"|" apps/shared/build.ts
          node tools/build.mjs

  build-packages:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Cache build node
        uses: actions/cache@v2
        id: build-dist-folder
        with:
          path: ./dist
          key: build-${{ hashFiles('./apps') }}-${{ hashFiles('./libs') }}-
          restore-keys: build-

      - name: Build Docker
        run: node tools/package.mjs
        env:
          CI_REGISTRY_IMAGE: trustcerts/trustchain
          CI_COMMIT_BRANCH: latest

      - name: Cache base build Image
        id: cache-trustchain-images
        uses: actions/cache@v2
        with:
          path: ./docker-dist
          key: build-${{ hashFiles('./apps') }}-${{ hashFiles('./libs') }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('./build') }}-
          restore-keys: buildDocker-

      - name: Save Docker Image
        if: steps.cache-trustchain-images.cache-hit != 'true'
        run: node tools/save-docker-images.mjs
        env:
          BASEIMAGE: baseimage
          CI_REGISTRY_IMAGE: trustcerts/trustchain
          CI_COMMIT_BRANCH: latest

  test-unit:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          cache: 'npm'
          node-version: 16

      - name: test
        run: |
          npm ci
          npm run test:unit-ci --cache .npm
        env:
          STORAGE: tmp/

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results ${{ matrix.service }}
          path: ./*.xml

  # TODO check if containers have to be build before the e2e test
  # TODO check if we moved completely to npm run test
  e2e:
    needs: build-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            http-gateway,
            http-observer,
            http-validator,
            network-gateway,
            network-observer,
            network-validator,
            persist,
            parse,
            wallet,
          ]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      # TODO cache node modules folder inside a job
      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Cache base build Image
        uses: actions/cache@v2
        with:
          path: ./docker-dist
          key: build-${{ hashFiles('./apps') }}-${{ hashFiles('./libs') }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('./build') }}-
          restore-keys: buildDocker-

      - name: load docker images
        run: node tools/load-docker-images.mjs

      - name: e2e test
        # TODO check if call is correct for ci usage
        run: npm run test -- -c ./apps/${{ matrix.services}}/test/jest-e2e.ts --detectOpenHandles --forceExit --coverage --ci --reporters=default --reporters=jest-junit

      - name: Upload E2E Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Results ${{ matrix.service }}
          path: ./*.xml

  publish-test-results:
    name: 'Publish Unit Tests Results'
    needs: e2e
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml

  network-test:
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci

      - name: Cache base build Image
        id: cache-trustchain-images
        uses: actions/cache@v2
        with:
          path: ./docker-dist
          key: build-${{ hashFiles('./apps') }}-${{ hashFiles('./libs') }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('./build') }}-
          restore-keys: buildDocker-

      - name: load docker images
        run: node tools/load-docker-images.mjs

      - name: TrustCerts Custom Blockchain
        uses: trustcerts/blockchain-custom-action@v1.0.1
        with:
          network_size: normal

      - name: run test
        run: npm run test:network

      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1
        with:
          dest: './logs'

      - name: Tar logs
        if: failure()
        run: tar cvzf ./logs.tgz ./logs

      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz

  release:
    if: github.ref == 'refs/heads/main'
    needs: network-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set npm
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Cache base build Image
        id: cache-trustchain-images
        uses: actions/cache@v2
        with:
          path: ./docker-dist
          key: build-${{ hashFiles('./apps') }}-${{ hashFiles('./libs') }}-${{ hashFiles('package-lock.json') }}-
          restore-keys: buildDocker-

      - name: load docker images
        run: node tools/load-docker-images.mjs

      - name: Login into docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: retag images
        run: node tools/retag.mjs
        env:
          CI_TAG: latest
          TAG_RELEASE: beta

  deploy-doc:
    if: github.ref == 'refs/heads/main'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: generate documentation folder
        run: npm run doc:build

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: documentation
